{"version":3,"file":"static/js/637.d87c1f1e.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/button/src/icon-button.tsx","../node_modules/@chakra-ui/icons/src/Delete.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Phonebook/Phonebook.jsx","pages/Contacts/Contacts.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" />\n    </g>\n  ),\n})\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { Flex, Text, IconButton } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\n\nexport const Contact = ({contact}) => {\n    const dispatch = useDispatch();\n     return (\n       <Flex\n         maxW=\"480px\"\n         bgColor=\"white\"\n         borderRadius=\"7px\"\n         p=\"4\"\n         alignItems=\"center\"\n         boxShadow=\"base\"\n         justifyContent=\"space-between\"\n         mt={5}\n       >\n         <Flex justifyContent={'center'}>\n           <Text fontWeight=\"bold\" fontSize=\"lg\" mr={5}>\n             {contact.name}:\n           </Text>\n           <Text color=\"gray.500\" fontSize=\"lg\">\n             {contact.number}\n           </Text>\n         </Flex>\n             <IconButton\n           aria-label={`Delete ${contact.name}`}\n           icon={<DeleteIcon />}\n            colorScheme=\"red\"\n           onClick={() => dispatch(deleteContact(contact.id))}\n         />\n       </Flex>\n     );\n}\n\n","export const selectContacts = state => state.contactDetails.contacts;\nexport const selectIsLoading = state => state.contactDetails.selectIsLoading;\nexport const selectError = state => state.contactDetails.error;\n\nexport const selectFilter = state => state.filterDetails.filter;","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { Contact } from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { List, ListItem } from '@chakra-ui/react';\n\nexport function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n    return (\n      <List ml={10}>\n        {showContacts &&\n          getFilteredContacts().map(contact => (\n            <ListItem\n              key={contact.id}\n            >\n              <Contact contact={contact} />\n            </ListItem>\n          ))}\n      </List>\n    );\n}\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { Box, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n   const handleInputChange = event => {\n     dispatch(filterContacts(event.currentTarget.value));\n   };\n\n        const labelStyle = {\n          fontSize: '24px',\n          fontWeight: '600',\n          fontStyle: 'italic',\n          color: 'black',\n        };\n\n\n  return (\n    <Box maxW=\"480px\" mb={10} mt={20} ml={10}>\n      <FormControl>\n        <FormLabel style={labelStyle}>\n          Find contacts by name\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleInputChange}\n            placeholder=\"find your contact\"\n            ccolor=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n            variant=\"filled\"\n          />\n        </FormLabel>\n      </FormControl>\n    </Box>\n  );\n}\n\nexport default Filter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Box, Button, FormLabel, Input } from '@chakra-ui/react';\n\nexport default function Phonebook() {\n\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n  const dispatch = useDispatch();\n\n\n\n  const handleFomSubmit = event => {\n    event.preventDefault();\n    const form = event.target; \n      const name = form.elements.name.value;\n      const number = form.elements.number.value;\n    const existingContact = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n    if (existingContact) {\n      alert('This contact already exists.');\n      return;\n    }\n\n    dispatch(addContact({\n      id: nanoid(),\n      name,\n      number,\n    }));\n    \n    form.reset();\n  };\n        const labelStyle = {\n          fontSize: '24px',\n          fontWeight: '600',\n          fontStyle: 'italic',\n          color: 'black',\n        };\n\n  return (\n    <Box maxW={480} ml={10}>\n      <form action=\"\" onSubmit={handleFomSubmit}>\n        <FormLabel htmlFor={nameInputId} style={labelStyle}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            placeholder=\"contact name\"\n            color=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n            variant=\"filled\"\n          />\n        </FormLabel>\n        <FormLabel htmlFor={phoneInputId} style={labelStyle}>\n          Phone\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone should contain more then 5 numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) .\"\n            required\n            id={phoneInputId}\n            placeholder=\"contact phone\"\n            color=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n            variant=\"filled\"\n          />\n        </FormLabel>\n        <Button\n          type=\"submit\"\n          mt={3}\n          colorScheme=\"teal\"\n          size=\"md\"\n          fontWeight=\"bold\"\n          _hover={{ bg: 'teal.600', cursor: 'pointer' }}\n        >\n          Add contact\n        </Button>{' '}\n      </form>\n    </Box>\n  );\n}\n","import { ContactsList } from \"components/Contacts/Contacts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectIsLoading } from \"redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport Filter from \"components/Filter/Filter\";\nimport Phonebook from \"components/Phonebook/Phonebook\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Box } from \"@chakra-ui/react\";\n\nimport backgroundImage from '../../images/vintage-typewriter-old-wooden-desk_627494-648.avif';\n\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n\n    return (\n      <Box position=\"relative\" w=\"100%\" minHeight=\"100vh\" overflow=\"hidden\">\n\n        <Box\n          position=\"absolute\"\n          top={0}\n          left={0}\n          w=\"100%\"\n          h=\"100%\"\n          bg={`url(${backgroundImage}) center/cover no-repeat`}\n          filter=\"blur(2px)\"\n          zIndex={-1}\n        />\n        {isLoading && <Loader />}\n        <Filter />\n\n        <Phonebook />\n        <ContactsList />\n      </Box>\n    );\n};\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["ref","cloneElement","icon","children","isRound","ariaLabel","rest","element","_children","focusable","Button","IconButton","isValidElement","padding","props","forwardRef","borderRadius","displayName","pathDefinition","d","defaultProps","path","toArray","Comp","createIcon","Children","Icon","options","length","fill","DeleteIcon","Contact","contact","dispatch","useDispatch","maxW","bgColor","p","alignItems","boxShadow","justifyContent","mt","fontWeight","fontSize","mr","name","color","number","colorScheme","onClick","deleteContact","id","selectContacts","state","contactDetails","contacts","selectIsLoading","selectFilter","filterDetails","filter","createContext","errorMessage","ListStylesProvider","useListStyles","List","styles","styleType","useMultiStyleConfig","omitThemingProps","stylePosition","spacing","validChildren","selector","spacingStyle","child","getValidChildren","value","ul","listStyleType","chakra","role","__css","container","OrderedList","as","UnorderedList","ListItem","ListIcon","ContactsList","useSelector","showContacts","Array","isArray","ml","toLowerCase","includes","map","mb","style","fontStyle","I","type","onChange","event","filterContacts","currentTarget","placeholder","ccolor","letterSpacing","_focus","backgroundColor","variant","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Phonebook","nameInputId","phoneInputId","labelStyle","action","onSubmit","preventDefault","form","target","elements","find","alert","addContact","reset","htmlFor","pattern","title","required","_hover","bg","cursor","ContactsPage","isLoading","useEffect","fetchContacts","position","w","minHeight","overflow","top","left","h","backgroundImage","zIndex","Loader","useStyleConfig","className","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","cx","field","useFormControlContext","passedProps","ownProps","_a","getLabelProps","label","display","FormLabel","isRequired","useFormControlStyles","span","getRequiredIndicatorProps","FormControlStylesProvider","strict","FormControlProvider","useFormControlProvider","idProp","context","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","useState","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","node","mergeRefs","getErrorMessageProps","dataAttr","getRootProps","onFocus","onBlur","FormControl","div","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","push","disabled","join","_b","_c","useFormControl","callAllHandlers","htmlSize","input","Input"],"sourceRoot":""}
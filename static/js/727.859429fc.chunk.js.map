{"version":3,"file":"static/js/727.859429fc.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/button/src/icon-button.tsx","../node_modules/@chakra-ui/icons/src/Delete.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Phonebook/Phonebook.jsx","pages/Contacts/Contacts.jsx","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" />\n    </g>\n  ),\n})\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { Flex, Text, IconButton } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\n\nexport const Contact = ({contact}) => {\n    const dispatch = useDispatch();\n     return (\n       <Flex\n         maxW=\"480px\"\n         bgColor=\"white\"\n         borderRadius=\"7px\"\n         p=\"4\"\n         alignItems=\"center\"\n         boxShadow=\"base\"\n         justifyContent=\"space-between\"\n         mt={5}\n       >\n         <Flex justifyContent={'center'}>\n           <Text fontWeight=\"bold\" fontSize=\"lg\" mr={5}>\n             {contact.name}:\n           </Text>\n           <Text color=\"gray.500\" fontSize=\"lg\">\n             {contact.number}\n           </Text>\n         </Flex>\n             <IconButton\n           aria-label={`Delete ${contact.name}`}\n           icon={<DeleteIcon />}\n            colorScheme=\"red\"\n           onClick={() => dispatch(deleteContact(contact.id))}\n         />\n       </Flex>\n     );\n}\n\n","export const selectContacts = state => state.contactDetails.contacts;\nexport const selectIsLoading = state => state.contactDetails.selectIsLoading;\nexport const selectError = state => state.contactDetails.error;\n\nexport const selectFilter = state => state.filterDetails.filter;","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { Contact } from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { List, ListItem } from '@chakra-ui/react';\n\nexport function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n    return (\n      <List>\n        {showContacts &&\n          getFilteredContacts().map(contact => (\n            <ListItem\n              key={contact.id}\n            >\n              <Contact contact={contact} />\n            </ListItem>\n          ))}\n      </List>\n    );\n}\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { Box, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n   const handleInputChange = event => {\n     dispatch(filterContacts(event.currentTarget.value));\n   };\n\n        const labelStyle = {\n          fontSize: '24px',\n          fontWeight: '600',\n          fontStyle: 'italic',\n          color: 'black',\n        };\n\n\n  return (\n    <Box maxW=\"480px\" mb={10}>\n      <FormControl>\n        <FormLabel style={labelStyle}>\n          Find contacts by name\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleInputChange}\n            placeholder=\"find your contact\"\n            ccolor=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n            variant=\"filled\"\n          />\n        </FormLabel>\n      </FormControl>\n    </Box>\n  );\n}\n\nexport default Filter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Box, Button, FormLabel, Input } from '@chakra-ui/react';\n\nexport default function Phonebook() {\n\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n  const dispatch = useDispatch();\n\n\n\n  const handleFomSubmit = event => {\n    event.preventDefault();\n    const form = event.target; \n      const name = form.elements.name.value;\n      const number = form.elements.number.value;\n    const existingContact = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n    if (existingContact) {\n      alert('This contact already exists.');\n      return;\n    }\n\n    dispatch(addContact({\n      id: nanoid(),\n      name,\n      number,\n    }));\n    \n    form.reset();\n  };\n        const labelStyle = {\n          fontSize: '24px',\n          fontWeight: '600',\n          fontStyle: 'italic',\n          color: 'black',\n        };\n\n  return (\n    <Box maxW={480}>\n      <form action=\"\" onSubmit={handleFomSubmit}>\n        <FormLabel htmlFor={nameInputId} style={labelStyle}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            placeholder=\"contact name\"\n            color=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n            variant=\"filled\"\n          />\n        </FormLabel>\n        <FormLabel htmlFor={phoneInputId} style={labelStyle}>\n          Phone\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone should contain more then 5 numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) .\"\n            required\n            id={phoneInputId}\n            placeholder=\"contact phone\"\n            color=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n            variant=\"filled\"\n          />\n        </FormLabel>\n        <Button\n          type=\"submit\"\n          mt={3}\n          colorScheme=\"teal\"  \n          size=\"md\"  \n          fontWeight=\"bold\" \n          _hover={{ bg: 'teal.600' }} \n        >\n          Add contact\n        </Button>{' '}\n      </form>\n    </Box>\n  );\n}\n","import { ContactsList } from \"components/Contacts/Contacts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectIsLoading } from \"redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport Filter from \"components/Filter/Filter\";\nimport Phonebook from \"components/Phonebook/Phonebook\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Box, Heading } from \"@chakra-ui/react\";\n\nimport backgroundImage from '../../images/vintage-typewriter-old-wooden-desk_627494-648.avif';\n\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n        const labelStyle = {\n          fontWeight: '600',\n          fontStyle: 'italic',\n          color: 'black',\n        };\n\n\n    return (\n      <Box position=\"relative\" w=\"100%\" minHeight=\"100vh\" overflow=\"hidden\">\n        <Heading mb={10} style={labelStyle}>\n          Phonebook\n        </Heading>\n\n        <Box\n          position=\"absolute\"\n          top={0}\n          left={0}\n          w=\"100%\"\n          h=\"100%\"\n          bg={`url(${backgroundImage}) center/cover no-repeat`}\n          filter=\"blur(2px)\"\n          zIndex={-1}\n        />\n        {isLoading && <Loader />}\n        <Filter />\n\n        <Phonebook />\n        <ContactsList />\n      </Box>\n    );\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["props","forwardRef","styles","className","align","useStyleConfig","omitThemingProps","textAlign","decoration","casing","rest","aliasedProps","textDecoration","object","clone","Object","assign","key","compact","textTransform","p","__css","Text","chakra","cx","ref","cloneElement","icon","children","isRound","ariaLabel","element","_children","focusable","Button","IconButton","isValidElement","padding","borderRadius","displayName","pathDefinition","d","defaultProps","path","toArray","Comp","createIcon","Children","Icon","options","length","fill","DeleteIcon","Contact","contact","dispatch","useDispatch","maxW","bgColor","alignItems","boxShadow","justifyContent","mt","fontWeight","fontSize","mr","name","color","number","colorScheme","onClick","deleteContact","id","selectContacts","state","contactDetails","contacts","selectIsLoading","selectFilter","filterDetails","filter","createContext","errorMessage","ListStylesProvider","useListStyles","List","styleType","useMultiStyleConfig","stylePosition","spacing","validChildren","selector","spacingStyle","child","getValidChildren","value","ul","listStyleType","role","container","OrderedList","as","UnorderedList","ListItem","ListIcon","ContactsList","useSelector","showContacts","Array","isArray","toLowerCase","includes","map","mb","style","fontStyle","I","type","onChange","event","filterContacts","currentTarget","placeholder","ccolor","letterSpacing","_focus","backgroundColor","variant","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Phonebook","nameInputId","phoneInputId","labelStyle","action","onSubmit","preventDefault","form","target","elements","find","alert","addContact","reset","htmlFor","pattern","title","required","_hover","bg","ContactsPage","isLoading","useEffect","fetchContacts","position","w","minHeight","overflow","top","left","h","backgroundImage","zIndex","Loader","h2","Heading"],"sourceRoot":""}
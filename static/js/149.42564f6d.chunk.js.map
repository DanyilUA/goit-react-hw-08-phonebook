{"version":3,"file":"static/js/149.42564f6d.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Phonebook/Phonebook.jsx","pages/Contacts/Contacts.jsx","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import { Box, Button, Text } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({contact}) => {\n    const dispatch = useDispatch();\n     return (\n       <Box>\n         <Text>\n           {contact.name}: <b>{contact.number}</b>\n         </Text>\n         <Button onClick={() => dispatch(deleteContact(contact.id))}>\n           Delete\n         </Button>\n       </Box>\n     );\n}\n\n","export const selectContacts = state => state.contactDetails.contacts;\nexport const selectIsLoading = state => state.contactDetails.selectIsLoading;\nexport const selectError = state => state.contactDetails.error;\n\nexport const selectFilter = state => state.filterDetails.filter;","import { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { Contact } from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n    return (\n      <ul>\n        {showContacts &&\n          getFilteredContacts().map(contact => (\n          <li key={contact.id}>\n            <Contact contact={contact} />\n          </li>\n        ))}\n      </ul>\n    );\n}\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { Box, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n   const handleInputChange = event => {\n     dispatch(filterContacts(event.currentTarget.value));\n   };\n\n      const labelStyle = {\n        fontSize: '24px',\n        fontWeight: '600',\n        fontStyle: 'italic',\n        color: 'black',\n      };\n\n  return (\n    <Box maxW=\"480px\">\n      <FormControl>\n        <FormLabel style={labelStyle}>\n          Find contacts by name\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleInputChange}\n            placeholder=\"find your contact\"\n            ccolor=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n          />\n        </FormLabel>\n      </FormControl>\n    </Box>\n  );\n}\n\nexport default Filter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Box, Button, FormLabel, Input } from '@chakra-ui/react';\n\nexport default function Phonebook() {\n\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n  const dispatch = useDispatch();\n\n\n\n  const handleFomSubmit = event => {\n    event.preventDefault();\n    const form = event.target; \n      const name = form.elements.name.value;\n      const number = form.elements.number.value;\n    const existingContact = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n    if (existingContact) {\n      alert('This contact already exists.');\n      return;\n    }\n\n    dispatch(addContact({\n      id: nanoid(),\n      name,\n      number,\n    }));\n    \n    form.reset();\n  };\n        const labelStyle = {\n          fontSize: '24px',\n          fontWeight: '600',\n          fontStyle: 'italic',\n          color: 'black',\n        };\n\n  return (\n    <Box maxW={480}>\n      <form action=\"\" onSubmit={handleFomSubmit}>\n        <FormLabel htmlFor={nameInputId} style={labelStyle}>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            placeholder=\"enter your email\"\n            color=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n          />\n        </FormLabel>\n        <FormLabel htmlFor={phoneInputId} style={labelStyle}>\n          Phone\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone should contain more then 5 numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) .\"\n            required\n            id={phoneInputId}\n            placeholder=\"enter your email\"\n            color=\"black\"\n            fontSize=\"20px\"\n            letterSpacing=\"1.3\"\n            _focus={{\n              backgroundColor: 'lightblue',\n            }}\n          />\n        </FormLabel>\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </Box>\n  );\n}\n","import { ContactsList } from \"components/Contacts/Contacts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectIsLoading } from \"redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport Filter from \"components/Filter/Filter\";\nimport Phonebook from \"components/Phonebook/Phonebook\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { Box, Heading } from \"@chakra-ui/react\";\n\nimport backgroundImage from '../../images/vintage-typewriter-old-wooden-desk_627494-648.avif';\n\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n\n    return (\n      <Box position=\"relative\" w=\"100%\" minHeight=\"100vh\" overflow=\"hidden\">\n        <Box\n          position=\"absolute\"\n          top={0}\n          left={0}\n          w=\"100%\"\n          h=\"100%\"\n          bg={`url(${backgroundImage}) center/cover no-repeat`}\n          filter=\"blur(2px)\"\n          zIndex={-1}\n        />\n        {isLoading && <Loader />}\n        <Filter />\n        <Heading>Phonebook</Heading>\n\n        <Phonebook />\n        <ContactsList />\n      </Box>\n    );\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["props","forwardRef","styles","className","align","useStyleConfig","omitThemingProps","textAlign","decoration","casing","rest","aliasedProps","textDecoration","object","clone","Object","assign","key","compact","textTransform","p","__css","Text","chakra","cx","Contact","contact","dispatch","useDispatch","name","number","onClick","deleteContact","id","selectContacts","state","contactDetails","contacts","selectIsLoading","selectFilter","filterDetails","filter","ContactsList","useSelector","showContacts","Array","isArray","length","toLowerCase","includes","map","maxW","style","fontSize","fontWeight","fontStyle","color","I","type","value","onChange","event","filterContacts","currentTarget","placeholder","ccolor","letterSpacing","_focus","backgroundColor","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Phonebook","nameInputId","phoneInputId","labelStyle","action","onSubmit","preventDefault","form","target","elements","find","alert","addContact","reset","htmlFor","pattern","title","required","ContactsPage","isLoading","useEffect","fetchContacts","position","w","minHeight","overflow","top","left","h","bg","backgroundImage","zIndex","Loader","h2","Heading"],"sourceRoot":""}
{"version":3,"file":"static/js/2.d13c4b77.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts/Contact.module.css?0098","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/Contacts/Contacts.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact__list\":\"Contact_contact__list__qYfAm\",\"contact\":\"Contact_contact__4gZSo\",\"button\":\"Contact_button__yvAim\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({contact}) => {\n    const dispatch = useDispatch();\n     return (\n       <div>\n         <p>\n           {contact.name}: <b>{contact.number}</b>\n         </p>\n         <button onClick={() => dispatch(deleteContact(contact.id))}>\n           Delete\n         </button>\n       </div>\n     );\n}\n\n","export const selectContacts = state => state.contactDetails.contacts;\nexport const selectIsLoading = state => state.contactDetails.selectIsLoading;\nexport const selectError = state => state.contactDetails.error;\n\nexport const selectFilter = state => state.filterDetails.filter;","import css from './Contact.module.css';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { Contact } from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport function ContactsList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n    return (\n      <ul className={css.contact__list}>\n        {showContacts &&\n          getFilteredContacts().map(contact => (\n          <li key={contact.id} className={css.contact}>\n            <Contact contact={contact} />\n          </li>\n        ))}\n      </ul>\n    );\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n   const handleInputChange = event => {\n     dispatch(filterContacts(event.currentTarget.value));\n   };\n\n\n\n  return (\n    <label className={css.label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleInputChange}\n        className={css.input}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Phonebook_container__u4h5I\",\"form\":\"Phonebook_form__J23fu\",\"label\":\"Phonebook_label__Qzztg\",\"input\":\"Phonebook_input__8yiEQ\",\"button\":\"Phonebook_button__QiRKB\"};","import { nanoid } from 'nanoid';\nimport css from './Phonebook.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport default function Phonebook() {\n\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n  const dispatch = useDispatch();\n\n\n\n  const handleFomSubmit = event => {\n    event.preventDefault();\n    const form = event.target; \n      const name = form.elements.name.value;\n      const number = form.elements.number.value;\n    const existingContact = contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase());\n\n    if (existingContact) {\n      alert('This contact already exists.');\n      return;\n    }\n\n    dispatch(addContact({\n      id: nanoid(),\n      name,\n      number,\n    }));\n    \n    form.reset();\n  };\n\n  return (\n    <div className={css.container}>\n      <form action=\"\" onSubmit={handleFomSubmit} className={css.form}>\n        <label htmlFor={nameInputId} className={css.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            className={css.input}\n          />\n        </label>\n        <label htmlFor={phoneInputId} className={css.label}>\n          Phone\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone should contain more then 5 numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) .\"\n            required\n            id={phoneInputId}\n            className={css.input}\n          />\n        </label>\n        <button type=\"submit\" className={css.button}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n","import { ContactsList } from \"components/Contacts/Contacts\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectIsLoading } from \"redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport Filter from \"components/Filter/Filter\";\nimport Phonebook from \"components/Phonebook/Phonebook\";\nimport { Loader } from \"components/Loader/Loader\";\n\n\nexport default function ContactsPage() {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n\n    return (\n        <div>\n        <h1>Phonebook</h1>    \n        {isLoading && <Loader />}\n        <Filter />\n        <Phonebook />\n        <ContactsList />\n      </div>\n    );\n};\n"],"names":["Contact","contact","dispatch","useDispatch","name","number","onClick","deleteContact","id","selectContacts","state","contactDetails","contacts","selectIsLoading","selectFilter","filterDetails","filter","ContactsList","useSelector","showContacts","Array","isArray","length","className","css","toLowerCase","includes","map","type","value","onChange","event","filterContacts","currentTarget","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Phonebook","nameInputId","phoneInputId","action","onSubmit","preventDefault","form","target","elements","find","alert","addContact","reset","htmlFor","pattern","title","required","ContactsPage","isLoading","useEffect","fetchContacts","Loader"],"sourceRoot":""}